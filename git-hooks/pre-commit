#!/usr/bin/env ruby
require 'pty'
html_path = "rspec_results.html"  
#PTY.spawn trick from
#http://stackoverflow.com/questions/1154846/continuously-read-from-stdout-of-external-process-in-ruby
begin
	PTY.spawn( "rspec --color -f h -o #{html_path} -f d spec/main_spec.rb" ) do |stdin, stdout, pid|
	begin
		stdin.each { |line| print line }
	rescue Errno::EIO
		end
	end
rescue PTY::ChildExited
	puts "The child process exited!"
end

# find out how many errors were found  
html = open(html_path).read  
examples = html.match(/(\d+) examples/)[0].to_i rescue 0  
failures = html.match(/(\d+) failures/)[0].to_i rescue 0  
if failures == 0 then
	failures = html.match(/(\d+) failure/)[0].to_i rescue 0  
end
pending = html.match(/(\d+) pending/)[0].to_i rescue 0  

if failures.zero?  
  puts "0 failed! #{examples} run, #{pending} pending"  
  puts "View rspec results at #{File.expand_path(html_path)}"  
  sleep 1
  exit 0
else  
  puts "\aDID NOT COMMIT YOUR FILES!"  
  puts "View rspec results at #{File.expand_path(html_path)}"  
  puts  
  puts "#{failures} failed! #{examples} run, #{pending} pending"  
  `open #{html_path}`
  exit 1  
end
