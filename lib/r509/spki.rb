require 'openssl'
require 'r509/exceptions'
require 'r509/io_helpers'

module R509
  # class for handling SPKAC/SPKI requests (typically generated by the <keygen> tag
  class Spki
    include R509::IOHelpers

    attr_reader :spki
    # @option opts [String,OpenSSL::Netscape::SPKI] :spki the spki you want to parse
    def initialize(opts={})
      if not opts.kind_of?(Hash)
        raise ArgumentError, 'Must provide a hash of options'
      end
      @spki = OpenSSL::Netscape::SPKI.new(opts[:spki].sub("SPKAC=",""))
    end

    # @return [OpenSSL::PKey::RSA] public key
    def public_key
      @spki.public_key
    end

    # Converts the SPKI into the PEM format
    #
    # @return [String] the SPKI converted into PEM format.
    def to_pem
      @spki.to_pem
    end

    alias :to_s :to_pem

    # Converts the SPKI into the DER format
    #
    # @return [String] the SPKI converted into DER format.
    def to_der
      @spki.to_der
    end

    # Writes the SPKI into the PEM format
    #
    # @param [String, #write] filename_or_io Either a string of the path for
    #  the file that you'd like to write, or an IO-like object.
    def write_pem(filename_or_io)
      write_data(filename_or_io, @spki.to_pem)
    end

    # Writes the SPKI into the DER format
    #
    # @param [String, #write] filename_or_io Either a string of the path for
    #  the file that you'd like to write, or an IO-like object.
    def write_der(filename_or_io)
      write_data(filename_or_io, @spki.to_der)
    end

    # Returns whether the public key is RSA
    #
    # @return [Boolean] true if the public key is RSA, false otherwise
    def rsa?
      @spki.public_key.kind_of?(OpenSSL::PKey::RSA)
    end

    # Returns whether the public key is DSA
    #
    # @return [Boolean] true if the public key is DSA, false otherwise
    def dsa?
      @spki.public_key.kind_of?(OpenSSL::PKey::DSA)
    end

    # Returns the bit strength of the key used to create the SPKI
    # @return [Integer] the integer bit strength.
    def bit_strength
      if self.rsa?
        return @spki.public_key.n.num_bits
      elsif self.dsa?
        return @spki.public_key.p.num_bits
      end
    end

    # Returns key algorithm (RSA/DSA)
    #
    # @return [String] value of the key algorithm. RSA or DSA
    def key_algorithm
      if @spki.public_key.kind_of? OpenSSL::PKey::RSA then
        :rsa
      elsif @spki.public_key.kind_of? OpenSSL::PKey::DSA then
        :dsa
      end
    end
  end
end
